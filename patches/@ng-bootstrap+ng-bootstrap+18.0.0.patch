diff --git a/node_modules/@ng-bootstrap/ng-bootstrap/fesm2022/ng-bootstrap.mjs b/node_modules/@ng-bootstrap/ng-bootstrap/fesm2022/ng-bootstrap.mjs
index d65de64..9a864b3 100644
--- a/node_modules/@ng-bootstrap/ng-bootstrap/fesm2022/ng-bootstrap.mjs
+++ b/node_modules/@ng-bootstrap/ng-bootstrap/fesm2022/ng-bootstrap.mjs
@@ -1,5 +1,5 @@
 import * as i0 from '@angular/core';
-import { Injectable, inject, ElementRef, NgZone, EventEmitter, Directive, Input, Output, TemplateRef, ViewContainerRef, Component, ViewChild, ContentChild, ChangeDetectorRef, DestroyRef, ContentChildren, NgModule, ChangeDetectionStrategy, ViewEncapsulation, PLATFORM_ID, Injector, afterNextRender, LOCALE_ID, forwardRef, afterRender, ApplicationRef, EnvironmentInjector, createComponent, Attribute, ViewChildren, InjectionToken } from '@angular/core';
+import { Injectable, inject, ElementRef, NgZone, EventEmitter, Directive, Input, Output, TemplateRef, ViewContainerRef, Component, ViewChild, ContentChild, ChangeDetectorRef, DestroyRef, ContentChildren, NgModule, ChangeDetectionStrategy, ViewEncapsulation, PLATFORM_ID, Injector, afterNextRender, LOCALE_ID, forwardRef, afterEveryRender, ApplicationRef, EnvironmentInjector, createComponent, Attribute, ViewChildren, InjectionToken } from '@angular/core';
 import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
 import { Observable, EMPTY, of, Subject, fromEvent, timer, race, BehaviorSubject, combineLatest, NEVER, zip, merge } from 'rxjs';
 import { endWith, takeUntil, filter, map, startWith, distinctUntilChanged, switchMap, take, tap, withLatestFrom, delay, mergeMap, skip, finalize } from 'rxjs/operators';
@@ -4133,7 +4133,7 @@ class NgbInputDatepicker {
                         placement: this.placement,
                         updatePopperOptions: (options) => this.popperOptions(addPopperOffset([0, 2])(options)),
                     });
-                    this._afterRenderRef = afterRender({
+                    this._afterRenderRef = afterEveryRender({
                         mixedReadWrite: () => {
                             this._positioning.update();
                         },
@@ -6449,7 +6449,7 @@ class NgbDropdown {
                             updatePopperOptions: (options) => this.popperOptions(addPopperOffset([0, 2])(options)),
                         });
                         this._applyPlacementClasses();
-                        this._afterRenderRef = afterRender({
+                        this._afterRenderRef = afterEveryRender({
                             write: () => {
                                 this._positionMenu();
                             },
@@ -9252,7 +9252,7 @@ class NgbPopover {
                     // This update is required for correct arrow placement
                     this._positioning.update();
                 });
-                this._afterRenderRef = afterRender({
+                this._afterRenderRef = afterEveryRender({
                     mixedReadWrite: () => {
                         this._positioning.update();
                     },
@@ -11644,7 +11644,7 @@ class NgbTooltip {
                     // This update is required for correct arrow placement
                     this._positioning.update();
                 });
-                this._afterRenderRef = afterRender({
+                this._afterRenderRef = afterEveryRender({
                     mixedReadWrite: () => {
                         this._positioning.update();
                     },
@@ -12237,7 +12237,7 @@ class NgbTypeahead {
                         placement: this.placement,
                         updatePopperOptions: (options) => this.popperOptions(addPopperOffset([0, 2])(options)),
                     });
-                    this._afterRenderRef = afterRender({
+                    this._afterRenderRef = afterEveryRender({
                         mixedReadWrite: () => {
                             this._positioning.update();
                         },
