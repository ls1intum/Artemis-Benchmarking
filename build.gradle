import com.gorylenko.GenerateGitPropertiesTask

// This section is required so that the latest version of the liquibase gradle plugin works
buildscript {
    dependencies {
        classpath "org.liquibase:liquibase-core:${liquibaseVersion}"
    }
}

plugins {
    id "checkstyle"
    id "idea"
    id "java"
    id "jacoco"
    id "com.diffplug.spotless" version "7.0.2"
    id "com.github.andygoossens.gradle-modernizer-plugin" version "${modernizerPluginVersion}"
    id "com.github.ben-manes.versions" version "0.52.0"
    id "com.github.node-gradle.node" version "${gradleNodePluginVersion}"
    id "com.google.cloud.tools.jib" version "3.4.4"
    id "com.gorylenko.gradle-git-properties" version "${gitPropertiesPluginVersion}"
    id "io.spring.dependency-management" version "1.1.7"
    id "org.liquibase.gradle" version "${liquibasePluginVersion}"
    id "org.openapi.generator" version "7.11.0"
    id "org.sonarqube" version "6.0.1.5171"
    id "org.springframework.boot" version "${springBootVersion}"
    // jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "de.tum.cit.aet"
version = "0.2.2"

description = "Benchmarking Application for Performance Tests in the Artemis project"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

ext {
    springProfiles = ""
}

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"

spotless {
    java {
        target "src/*/java/**/*.java"
        // removeUnusedImports()
    }
}

apply from: "gradle/swagger.gradle"
apply from: "gradle/cache.gradle"
apply from: "gradle/liquibase.gradle"
// jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "de.tum.cit.aet.ArtemisBenchmarkingApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events "FAILED", "SKIPPED"
    }
    jvmArgs += "-Djava.security.egd=file:/dev/./urandom -Xmx512m"
    testClassesDirs = testing.suites.test.sources.output.classesDirs
    classpath = testing.suites.test.sources.runtimeClasspath
    reports.html.required = false
}

modernizer {
    failOnViolations = true
    includeTestClasses = true
}



check.dependsOn integrationTest

tasks.register("testReport", TestReport) {
    destinationDirectory.set(layout.buildDirectory.dir("reports/tests"))
    testResults.from(tasks.named("test"))
}

tasks.register("integrationTestReport", TestReport) {
    destinationDirectory.set(layout.buildDirectory.dir("reports/tests"))
    testResults.from(tasks.named("integrationTest"))
}

tasks.withType(GenerateGitPropertiesTask).configureEach {
  outputs.doNotCacheIf("Task is always executed") { true }
}

checkstyle {
    // Exclude everything under the build directory
    toolVersion = "${checkstyleVersion}"
    configFile = file("checkstyle.xml")
    checkstyleTest.enabled = false
    maxErrors = 0
}

checkstyleMain.source = "src/main/java"

configurations {
    providedRuntime
}

repositories {
    mavenCentral()
    mavenLocal()
    // jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {
    annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen:${hibernateVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"

    // import JHipster dependencies BOM
    implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")

    // Use ", version: jhipsterDependenciesVersion, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation "tech.jhipster:jhipster-framework"
    implementation "jakarta.annotation:jakarta.annotation-api:3.0.0"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate6"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:2.8.4"
    implementation "com.zaxxer:HikariCP:6.2.1"
    implementation "org.apache.commons:commons-lang3:3.17.0"
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    // Openapi generator uses javax namespace for now https://github.com/OpenAPITools/openapi-generator/pull/13593
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "javax.validation:validation-api:2.0.1.Final"
    implementation "org.hibernate.orm:hibernate-core"
    implementation "org.hibernate.validator:hibernate-validator:8.0.2.Final"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.springframework.boot:spring-boot-loader-tools:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-cache:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-logging:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"

    // NOTE: the following dependencies use the newer versions explicitly to avoid other dependencies to use older versions
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"

    // use newest version of commons-compress to avoid security issues through outdated dependencies
    implementation "org.apache.commons:commons-compress:1.27.1"

    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude module: "spring-boot-starter-undertow"
    }
    implementation "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server:${springBootVersion}"
    implementation "org.springframework.security:spring-security-data:${springSecurityVersion}"

    implementation "io.micrometer:micrometer-registry-prometheus:1.14.3"
    implementation "io.dropwizard.metrics:metrics-core:4.2.30"
    implementation "org.springframework.security:spring-security-messaging:${springSecurityVersion}"
    implementation "commons-io:commons-io:2.18.0"
    implementation "com.thedeanda:lorem:2.2"
    implementation "org.eclipse.jgit:org.eclipse.jgit:7.1.0.202411261347-r"
    // https://search.maven.org/artifact/org.eclipse.jgit/org.eclipse.jgit
    implementation "org.eclipse.jgit:org.eclipse.jgit.ssh.apache:7.1.0.202411261347-r"
    // Note: jgit.htt.server is not compatible with jakarta yet and neither is there a timeline. Hence, we had to add the source files to our repository.
    // Once the compatibility is given, we can switch back to the maven dependency.
    implementation "org.eclipse.jgit:org.eclipse.jgit.http.server:7.1.0.202411261347-r"

    // apache ssh enabled the ssh git operations in LocalVC together with JGit
    implementation "org.apache.sshd:sshd-core:2.14.0"
    implementation "org.apache.sshd:sshd-git:2.14.0"
    implementation "org.apache.sshd:sshd-osgi:2.14.0"
    implementation "org.apache.sshd:sshd-sftp:2.14.0"

    implementation "org.bouncycastle:bcpkix-jdk18on:1.80"
    implementation "org.bouncycastle:bcprov-jdk18on:1.80"

    implementation "org.eclipse.jgit:org.eclipse.jgit:7.1.0.202411261347-r"
    implementation "io.reactivex.rxjava3:rxjava:3.1.10"
    implementation "io.netty:netty-resolver-dns-native-macos:4.1.117.Final:osx-aarch_64"
    implementation "com.opencsv:opencsv:5.10"

    // ---- CHECKSTYLE DEPENDENCIES ----

    // use newest version of plexus to avoid security issues through outdated dependencies
    checkstyle "org.codehaus.plexus:plexus-container-default:2.1.1"
    checkstyle "org.codehaus.plexus:plexus-classworlds:2.8.0"
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"


    // ---- TEST DEPENDENCIES ----

    testImplementation "org.testcontainers:jdbc:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-test:${springBootVersion}"
    testImplementation "org.springframework.security:spring-security-test:${springSecurityVersion}"
    testImplementation("com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    testRuntimeOnly("com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    // NOTE: make sure this corresponds to the version used for JUnit in the testImplementation
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"

}

tasks.register("cleanResources", Delete) {
    delete(layout.buildDirectory.dir("resources"))
}

wrapper {
    gradleVersion = "8.12"
}

tasks.register("webapp_test", NpmTask) {
    inputs.property("appVersion", project.version)
    inputs.files("package-lock.json")
        .withPropertyName("package-lock")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("build.gradle")
        .withPropertyName("build.gradle")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("angular.json")
        .withPropertyName("angular.json")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("tsconfig.json", "tsconfig.app.json")
        .withPropertyName("tsconfig")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir("src/main/webapp/")
        .withPropertyName("webapp-source-dir")
        .withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.dir("build/test-results/jest/")
        .withPropertyName("jest-result-dir")
    outputs.file("build/test-results/TESTS-results-jest.xml")
        .withPropertyName("jest-result")
        outputs.file("build/test-results/clover.xml")
        .withPropertyName("clover-result")

    dependsOn(tasks.named("npmInstall"), tasks.named("compileTestJava"))
    args = ["run", "test"]
}

node {
    download = true
    version = "${node_version}"
    npmVersion = "${npm_version}"
}

// Copy local node and npm to a fixed location for npmw
def fixedNode = tasks.register("fixedNode", Copy) {
    from nodeSetup
    into "build/node"
}
tasks.named("nodeSetup").configure { finalizedBy fixedNode }

def fixedNpm = tasks.register("fixedNpm", Copy) {
    from npmSetup
    into "build/node"
}
tasks.named("npmSetup").configure { finalizedBy fixedNpm }


test.dependsOn webapp_test
compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

def isNonStable = { String version ->
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }

    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

// Available commands:
//
// 1) Build production:                             ./gradlew -Pprod -Pwar clean bootWar
// 2) Execute server integration tests:             ./gradlew integrationTest -x webapp
// 3) Find dependency updates:                      ./gradlew dependencyUpdates -Drevision=release
// 4) Check Java code format:                       ./gradlew spotlessCheck -x webapp
// 5) Apply Java code formatter:                    ./gradlew spotlessApply -x webapp
// 6) Check JavaDoc:                                ./gradlew checkstyleMain -x webapp
// 7) Detects uses of legacy code:                  ./gradlew modernizer -x webapp
