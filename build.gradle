import com.gorylenko.GenerateGitPropertiesTask

// This section is required so that the latest version of the liquibase gradle plugin works
buildscript {
    dependencies {
        classpath("org.liquibase:liquibase-core:${liquibaseVersion}") {
            exclude group: "com.opencsv", module: "opencsv"
        }
    }
}

plugins {
    id "checkstyle"
    id "idea"
    id "java"
    id "jacoco"
    id "com.diffplug.spotless" version "${spotlessPluginVersion}"
    id "com.github.andygoossens.gradle-modernizer-plugin" version "${modernizerPluginVersion}"
    id "com.github.ben-manes.versions" version "0.52.0"
    id "com.github.node-gradle.node" version "${gradleNodePluginVersion}"
    id "com.google.cloud.tools.jib" version "${jibPluginVersion}"
    id "com.gorylenko.gradle-git-properties" version "${gitPropertiesPluginVersion}"
    id "io.spring.dependency-management" version "1.1.7"
    id "org.liquibase.gradle" version "${liquibasePluginVersion}"
    id "org.openapi.generator" version "7.13.0"
    id "org.sonarqube" version "${sonarqubePluginVersion}"
    id "org.springframework.boot" version "${springBootVersion}"
    // jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "de.tum.cit.aet"
version = "0.2.8"

description = "Benchmarking Application for Performance Tests in the Artemis project"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

ext {
    springProfiles = ""
}

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"

spotless {
    java {
        target "src/*/java/**/*.java"
        // removeUnusedImports()
    }
}

apply from: "gradle/swagger.gradle"
apply from: "gradle/cache.gradle"
apply from: "gradle/liquibase.gradle"


if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "de.tum.cit.aet.ArtemisBenchmarkingApp"
}

modernizer {
    failOnViolations = true
    includeTestClasses = true
}


tasks.register("testReport", TestReport) {
    destinationDirectory.set(layout.buildDirectory.dir("reports/tests"))
    testResults.from(tasks.named("test"))
}

tasks.withType(GenerateGitPropertiesTask).configureEach {
  outputs.doNotCacheIf("Task is always executed") { true }
}

checkstyle {
    // Exclude everything under the build directory
    toolVersion = "${checkstyleVersion}"
    configFile = file("checkstyle.xml")
    checkstyleTest.enabled = false
    maxErrors = 0
}

checkstyleMain.source = "src/main/java"

configurations {
    providedRuntime
}

repositories {
    mavenCentral()
    mavenLocal()
    // jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

configurations.configureEach {
    exclude group: "org.dom4j", module: "dom4j"
    exclude group: "org.xmlpull", module: "pull-parser"
    exclude group: "jaxen", module: "jaxen"
    exclude group: "xmlpull", module: "xpp3"
    exclude group: "xsdlib", module: "xsdlib"
    exclude group: "javax.xml.stream", module: "stax-api"

    // Vintage Junit is required for test containers to work correctly
//    exclude group: "org.junit.vintage", module: "junit-vintage-engine"
//    exclude group: "junit", module: "junit"
    exclude group: "com.vaadin.external.google", module: "android-json"
    exclude group: "org.xmlunit", module: "xmlunit-core"

    exclude group: "org.testcontainers", module: "mariadb"
    exclude group: "org.testcontainers", module: "mssqlserver"

    exclude group: "jakarta.ws.rs", module: "jsr311-api"

    exclude group: "org.springframework.boot", module: "spring-boot-starter-undertow"

    // these modules include security issues and are not needed
    exclude group: "commons-jxpath", module: "commons-jxpath"
    exclude group: "com.fasterxml.woodstox", module: "woodstox-core"

    // those are transitive dependencies of JPlag Text --> Stanford NLP
    // Note: we exclude them because they are not needed and might have security vulnerabilities
    exclude group: "org.apache.lucene", module: "lucene-queryparser"
    exclude group: "org.apache.lucene", module: "lucene-core"
    exclude group: "org.apache.lucene", module: "lucene-analyzers-common"
    exclude group: "com.google.protobuf", module: "protobuf-java"

    exclude group: "org.jasypt", module: "jasypt"

    // required by eureka client, but not used in this project
    exclude group: "com.thoughtworks.xstream", module: "xstream"
    // required by JPlag, but not used in this project
    exclude group: "xerces", module: "xercesImpl"
    // required by JPlag, but not used in this project
    exclude group: "xalan", module: "xalan"
    // required by JPlag, but not used in this project
    exclude group: "xalan", module: "serializer"

    exclude group: "org.springframework.boot", module: "spring-boot-starter-cache"
    exclude group: "net.logstash.logback", module: "logstash-logback-encoder"

    exclude group: "javax.cache", module: "cache-api"
    exclude group: "javax.transaction", module: "javax.transaction-api"

    // JPlag depends on those, but they are not really needed
    exclude group: "org.jgrapht", module: "jgrapht-core"
    exclude group: "org.apfloat", module: "apfloat"
    exclude group: "xom", module: "xom"

    exclude group: "commons-configuration", module: "commons-configuration"
}

dependencies {
    annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen:${hibernateVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"

    // import JHipster dependencies BOM
    implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }

    implementation "org.hibernate.orm:hibernate-core:${hibernateVersion}"
    annotationProcessor "org.hibernate.orm:hibernate-core:${hibernateVersion}"
    implementation "org.hibernate.orm:hibernate-envers:${hibernateVersion}"

    // compatible with Hibernate 6.x and Spring Boot 3.x
    implementation "jakarta.persistence:jakarta.persistence-api:3.1.0"

    // Use ", version: jhipsterDependenciesVersion, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation "tech.jhipster:jhipster-framework"
    implementation "jakarta.annotation:jakarta.annotation-api:3.0.0"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate6:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:2.8.9"
    implementation "com.zaxxer:HikariCP:6.3.0"
    implementation "org.apache.commons:commons-lang3:3.17.0"
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    // Openapi generator uses javax namespace for now https://github.com/OpenAPITools/openapi-generator/pull/13593
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "javax.validation:validation-api:2.0.1.Final"
    implementation "org.hibernate.orm:hibernate-core"
    implementation "org.hibernate.validator:hibernate-validator:9.0.1.Final"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.springframework.boot:spring-boot-loader-tools:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-cache:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-logging:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"


    // Avoid outdated version of netty to prevent security issues
    implementation("io.netty:netty-buffer") { version { 				strictly nettyVersion } }
    implementation("io.netty:netty-codec") { version { 					strictly nettyVersion } }
    implementation("io.netty:netty-codec-dns") { version { 				strictly nettyVersion } }
    implementation("io.netty:netty-codec-http") { version { 			strictly nettyVersion } }
    implementation("io.netty:netty-codec-http2") { version { 			strictly nettyVersion } }
    implementation("io.netty:netty-codec-socks") { version { 			strictly nettyVersion } }
    implementation("io.netty:netty-common") { version { 				strictly nettyVersion } }
    implementation("io.netty:netty-resolver") { version { 	    		strictly nettyVersion } }
    implementation("io.netty:netty-resolver-dns") { version { 			strictly nettyVersion } }
    implementation("io.netty:netty-transport") { version { 				strictly nettyVersion } }
    implementation("io.netty:netty-transport-native-epoll") { version {	strictly nettyVersion } }
    implementation("io.netty:netty-handler") { version { 				strictly nettyVersion } }
    implementation("io.netty:netty-handler-proxy") { version { 			strictly nettyVersion } }

    implementation("net.minidev:json-smart") { version { 				strictly "2.5.2" } }



    // NOTE: the following dependencies use the newer versions explicitly to avoid other dependencies to use older versions
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"

    // use newest version of commons-compress to avoid security issues through outdated dependencies
    implementation "org.apache.commons:commons-compress:1.27.1"

    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude module: "spring-boot-starter-undertow"
    }
    implementation "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server:${springBootVersion}"
    implementation "org.springframework.security:spring-security-data:${springSecurityVersion}"


    // use the latest version to avoid security vulnerabilities
    implementation "org.springframework:spring-aop:${springFrameworkVersion}"
    implementation "org.springframework:spring-aspects:${springFrameworkVersion}"
    implementation "org.springframework:spring-beans:${springFrameworkVersion}"
    implementation "org.springframework:spring-context:${springFrameworkVersion}"
    implementation "org.springframework:spring-context-support:${springFrameworkVersion}"
    implementation "org.springframework:spring-core:${springFrameworkVersion}"
    implementation "org.springframework:spring-expression:${springFrameworkVersion}"
    implementation "org.springframework:spring-jcl:${springFrameworkVersion}"
    implementation "org.springframework:spring-jdbc:${springFrameworkVersion}"
    implementation "org.springframework:spring-messaging:${springFrameworkVersion}"
    implementation "org.springframework:spring-orm:${springFrameworkVersion}"
    implementation "org.springframework:spring-tx:${springFrameworkVersion}"
    implementation "org.springframework:spring-webmvc:${springFrameworkVersion}"
    implementation "org.springframework:spring-web:${springFrameworkVersion}"
    implementation "org.springframework:spring-webflux:${springFrameworkVersion}"
    implementation "org.springframework:spring-websocket:${springFrameworkVersion}"


    implementation "io.micrometer:micrometer-registry-prometheus:1.15.2"
    implementation "io.dropwizard.metrics:metrics-core:4.2.32"
    implementation "org.springframework.security:spring-security-messaging:${springSecurityVersion}"
    implementation "commons-io:commons-io:2.19.0"
    implementation "com.thedeanda:lorem:2.2"
    implementation "org.eclipse.jgit:org.eclipse.jgit:${jgitVersion}"
    // https://search.maven.org/artifact/org.eclipse.jgit/org.eclipse.jgit
    implementation "org.eclipse.jgit:org.eclipse.jgit.ssh.apache:${jgitVersion}"
    // Note: jgit.htt.server is not compatible with jakarta yet and neither is there a timeline. Hence, we had to add the source files to our repository.
    // Once the compatibility is given, we can switch back to the maven dependency.
    implementation "org.eclipse.jgit:org.eclipse.jgit.http.server:${jgitVersion}"

    // apache ssh enabled the ssh git operations in LocalVC together with JGit
    implementation "org.apache.sshd:sshd-core:${sshdVersion}"
    implementation "org.apache.sshd:sshd-git:${sshdVersion}"
    implementation "org.apache.sshd:sshd-osgi:${sshdVersion}"
    implementation "org.apache.sshd:sshd-sftp:${sshdVersion}"

    implementation "org.bouncycastle:bcpkix-jdk18on:1.81"
    implementation "org.bouncycastle:bcprov-jdk18on:1.81"

    implementation "io.reactivex.rxjava3:rxjava:3.1.10"
    implementation "io.netty:netty-resolver-dns-native-macos:${nettyVersion}:osx-aarch_64"
    // TODO: we should remove this dependency once we have migrated to org.apache.commons:csv
    implementation ("com.opencsv:opencsv:5.11.1") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }

    // explicitly only use this at runtime (required by liquibase, because developers should prefer org.apache.commons:csv
    runtimeOnly ("com.opencsv:opencsv:5.11.1") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }

    // ---- CHECKSTYLE DEPENDENCIES ----

    // use newest version of plexus to avoid security issues through outdated dependencies
    checkstyle "org.codehaus.plexus:plexus-container-default:2.1.1"
    checkstyle "org.codehaus.plexus:plexus-classworlds:2.9.0"
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"


    // ---- TEST DEPENDENCIES ----

    testImplementation "org.springframework:spring-test:${springFrameworkVersion}"

    testImplementation "org.testcontainers:jdbc:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-test:${springBootVersion}"
    testImplementation "org.springframework.security:spring-security-test:${springSecurityVersion}"
    testImplementation("com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    testRuntimeOnly("com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }

    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    // Required for Testcontainers to work with JUnit 5
    testImplementation "org.junit.vintage:junit-vintage-engine:${junitVersion}"

    // NOTE: make sure this corresponds to the version used for JUnit in the testImplementation
    testImplementation "org.junit.platform:junit-platform-commons:${junitPlatformVersion}"
    testImplementation "org.junit.platform:junit-platform-engine:${junitPlatformVersion}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
}


// we have to apply the test.gradle file after the dependencies block, otherwise we get the error  Cannot change dependencies of dependency configuration ":mockitoAgent" after it has been resolved
apply from: "gradle/test.gradle"

tasks.register("cleanResources", Delete) {
    delete(layout.buildDirectory.dir("resources"))
}

wrapper {
    gradleVersion = "8.14.2"
}

tasks.register("webapp_test", NpmTask) {
    inputs.property("appVersion", project.version)
    inputs.files("package-lock.json")
        .withPropertyName("package-lock")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("build.gradle")
        .withPropertyName("build.gradle")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("angular.json")
        .withPropertyName("angular.json")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("tsconfig.json", "tsconfig.app.json")
        .withPropertyName("tsconfig")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir("src/main/webapp/")
        .withPropertyName("webapp-source-dir")
        .withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.dir("build/test-results/jest/")
        .withPropertyName("jest-result-dir")
    outputs.file("build/test-results/TESTS-results-jest.xml")
        .withPropertyName("jest-result")
        outputs.file("build/test-results/clover.xml")
        .withPropertyName("clover-result")

    dependsOn(tasks.named("npmInstall"), tasks.named("compileTestJava"))
    args = ["run", "test"]
}

node {
    download = true
    version = "${node_version}"
    npmVersion = "${npm_version}"
}

// Copy local node and npm to a fixed location for npmw
def fixedNode = tasks.register("fixedNode", Copy) {
    from nodeSetup
    into "build/node"
}
tasks.named("nodeSetup").configure { finalizedBy fixedNode }

def fixedNpm = tasks.register("fixedNpm", Copy) {
    from npmSetup
    into "build/node"
}
tasks.named("npmSetup").configure { finalizedBy fixedNpm }


compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

def isNonStable = { String version ->
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }

    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

// Available commands:
//
// 1) Build production:                             ./gradlew -Pprod -Pwar clean bootWar
// 2) Execute server integration tests:             ./gradlew test -x webapp
// 3) Find dependency updates:                      ./gradlew dependencyUpdates -Drevision=release
// 4) Check Java code format:                       ./gradlew spotlessCheck -x webapp
// 5) Apply Java code formatter:                    ./gradlew spotlessApply -x webapp
// 6) Check JavaDoc:                                ./gradlew checkstyleMain -x webapp
// 7) Detects uses of legacy code:                  ./gradlew modernizer -x webapp
